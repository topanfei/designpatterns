在策略模式中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。
在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变的context对象。策略对象改变context对象的执行算法。

主要解决：在有多种算法相似的情况下，使用if...else所带来的复杂和难以维护
何时使用：一个系统有许多类，而区分它们的只是它们直接的行为。
如何解决：将这些算法封装成一个一个的类，任意的替换。
优点：
（1）算法是可以自由切换
（2）避免使用多重条件判断
（3）扩展性良好
缺点：
（1）策略类会增多
（2）所有策略类都需要对外暴露
注意事项：如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。

-------------------------------------------------------------------------------------
该示例是一个基本的应用，但是感觉效果不是很好。
我的需求：区局、房办、业委会都可以获取小区信息，但是以前的写法都是写好多判断，根据不同判断去调用对应的方法。现在不想写判断，所以想改造。
因为Context类感觉有没有都可以，所以感觉解决不了具体的问题。
如下述写法也可以实现打印的效果
Strategy strategy1 = new OperationAdd();
int value = strategy1.doOperation(2, 3);
System.out.println("value="+value);
